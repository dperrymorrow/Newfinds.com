title: Javascript Callback Class
-
date: 2011, April
-
teaser: A simple class to dispatch events across javascript classes and scope.
-
content: 
So you need one class to tell the other when something happens, but you don't want to call a function directly, because well thats just sloppy. The following class is what i came up with to "loosely couple" events and Javascript classes together.

### The Callback Class

    [javascript]
	var Callbacks = {};
	Callbacks.triggers = {};

	Callbacks.addCallback = function( trigger, instance, method ){

		if( this.triggers[ trigger ] == undefined ){
			this.triggers[ trigger ] = Array( { obj:instance, action:method } );
		}else{
			this.triggers[ trigger ].push( { obj:instance, action:method } );
		};
	};

	Callbacks.fireCallback = function( trigger, param ){

		if( this.triggers[ trigger ] == undefined ){
		//	Tracer.trace( 'no callbacks for trigger ' + trigger );
			return;
		};

		for (var i=0; i < this.triggers[ trigger ].length; i++) {
			var listener = this.triggers[ trigger ][ i ];

			if( listener.action != undefined ){
				listener.obj[ listener.action ]( param );
			}
		};


	};
	
### Usage example of listening for a callback within another class

    [javascript]
    
	var SomeClass = function(){

		this.build = function(){
			/*
			* to listen for a callback, 
			* specify the callback string,
			* the callback scope, in this case our instance
			* and the callback method as a string
			*/
			Callbacks.addCallback( 'myTestCallback', this, 'firedFromCallback' );
			// Callbacks is a singleton and can be accessed from anywhere
		}
		
		this.firedFromCallback = function( params ){
			alert( params );
			// params will be the object passed to the Callbacks.fireCallback method
		}
		
		this.build();
		
	}
	
### Example of firing a callback

    [javascript]
	// from some other class, method, object, wherever, doesnt matter.
    Callbacks.fireCallback( 'myTestCallback', {foo:'bar'});
	// the listener will recieve the object as a param of the callback method
	

	
	
	
	
	
	
	
	
	
	
	
	
	